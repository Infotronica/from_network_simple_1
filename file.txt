All computer applications need to store and retrieve information. While a proc-
ess is running, it can store a limited amount of information within its own address
space. However, the storage capacity is restricted to the size of the virtual address
space. For some applications this size is adequate, but for others, such as airline
reservations, banking, or corporate record keeping, it is far too small.
A second problem with keeping information within a processâ€™ address space is
that when the process terminates, the information is lost. For many applications
(e.g., for databases), the information must be retained for weeks, months, or even
forever. Having it vanish when the process using it terminates is unacceptable.
Furthermore, it must not go away when a computer crash kills the process.
A third problem is that it is frequently necessary for multiple processes to ac-
cess (parts of) the information at the same time. If we have an online telephone di-
rectory stored inside the address space of a single process, only that process can
access it. The way to solve this problem is to make the information itself indepen-
dent of any one process.

A file is an abstraction mechanism. It provides a way to store information 
othe disk and read it back later. This must be done in such a way as to 
shield thuser from the details of how and where the information is stored, 
and how the disactually work. Probably the most important characteristic 
of any abstraction mechanism is thway the objects being managed are named, so 
we will start our examination of fisystems with the subject of file naming. 
When a process creates a file, it gives thfile a name. When the process terminates, 
the file continues to exist and can be acessed by other processes using its name.
The exact rules for file naming vary somewhat from system to system, but acurrent 
operating systems allow strings of one to eight letters as legal file nameThus andrea, 
bruce, and cathy are possible file names. Frequently digits and spcial characters 
are also permitted, so names like 2, urgent!, and Fig.2-14 are oftevalid as well. 
Many file systems support names as long as 255 characters.
Some file systems distinguish between upper- and lowercase letters, whereothers do not. 
UNIX falls in the first category; the old MS-DOS falls in the seond. (As an aside, 
while ancient, MS-DOS is still very widely used in embeddesystems, so it is by no means 
obsolete.) Thus, a UNIX system can have all of thfollowing as three distinct 
files: maria, Maria, and MARIA. In MS-DOS, all thenames refer to the same file.
An aside on file systems is probably in order here. Windows 95 and Window98 both 
used the MS-DOS file system, called FAT-16, and thus inherit many of iproperties, 
such as how file names are constructed. Windows 98 introduced somextensions to 
FAT -16, leading to FAT-32, but these two are quite similar. In addtion, Windows NT, 
Windows 2000, Windows XP, Windows Vista, Windows 7, anWindows 8 all still support 
both FAT file systems, which are really obsolete noHowever, these newer operating 
systems also have a much more advanced nativfile system (NTFS) that has different 
properties (such as file names in Unicode).  

Lorem Ipsum is simply dummy text of the printing and typesetting industry. 
Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, 
when an unknown printer took a galley of type and scrambled it to make a type 
specimen book. It has survived not only five centuries, but also the leap into 
electronic typesetting, remaining essentially unchanged. It was popularised 
in the 1960s with the release of Letraset sheets containing Lorem Ipsum 
passages, and more recently with desktop publishing software like Aldus 
PageMaker including versions of Lorem Ipsum.

